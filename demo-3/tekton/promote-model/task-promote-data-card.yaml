apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: promote-model-card
spec:
  params:
    - name: model_card
      type: string
    - name: bucket_name
      type: string
    - name: endpoint_url
      type: string
    - name: aws_access_key_id
      type: string
    - name: aws_secret_access_key
      type: string
    - name: file_name
      type: string
  steps:
    - computeResources: {}
      env:
        - name: model_CARD
          value: $(params.model_card)
        - name: FILE_NAME
          value: $(params.file_name)
        - name: BUCKET_NAME
          value: $(params.bucket_name)
        - name: S3_ENDPOINT
          value: $(params.endpoint_url)
        - name: ACCESS_KEY
          value: $(params.aws_access_key_id)
        - name: SECRET_KEY
          value: $(params.aws_secret_access_key)
      image: 'quay.io/rh_ee_akugel/datacard-python:1.1'
      name: get-model-s3
      script: |
        #!/usr/bin/env python3

        import boto3
        import os
        import json
        from typing import Tuple
        import hashlib

        def set_hash(data_card: dict):
            buckets_string = str(data_card["buckets"])
            print(f"Bucket info that is being hashed:\n{buckets_string}\n")
            data_card["hash"] = hashlib.sha256(str.encode(buckets_string)).hexdigest()


        def check_hash(data_card: dict) -> Tuple[bool, str]:
            buckets_string = str(data_card["buckets"])
            print(f"Bucket info that is being hashed:\n{buckets_string}\n")
            data_card_hash = hashlib.sha256(str.encode(buckets_string)).hexdigest()

            return data_card["hash"] == data_card_hash, data_card_hash

        def update_model_card(model_card: dict):

            bucket_name = os.environ.get("BUCKET_NAME")
            endpoint_url=os.environ.get("S3_ENDPOINT")
            aws_access_key_id = os.environ.get("ACCESS_KEY")
            aws_secret_access_key = os.environ.get("SECRET_KEY")
            object_key = os.environ.get("FILE_NAME")

            s3_client = boto3.client(
                service_name="s3",
                aws_access_key_id=aws_access_key_id,
                aws_secret_access_key=aws_secret_access_key,
                endpoint_url=endpoint_url,
            )

            response = s3_client.put_object(
                Bucket=bucket_name,
                Key=object_key,
                Body=json.dumps(model_card, indent=2)
            )
            print(response)


        def main():
            print(os.getcwd())
            # with open("incubator-demos/demo-2/python/promote-model-card.py", "r") as f:
            #     model_card = json.load(f)
            model_card = json.loads(os.environ.get("model_CARD"))
            model_card["deployable"] = True
            print(json.dumps(model_card, indent=2))
            update_model_card(model_card)

        if __name__ == "__main__":
            main()
