apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: update-model-pull-location
spec:
  params:
    - name: model_card
      type: string
    - name: model_pull_location
      type: string
    - name: bucket_name
      type: string
    - name: endpoint_url
      type: string
    # - name: aws_access_key_id
    #   type: string
    # - name: aws_secret_access_key
    #   type: string
    - name: file_name
      type: string
  steps:
    - computeResources: {}
      env:
        - name: MODEL_CARD
          value: $(params.model_card)
        - name: MODEL_PULL_LOCATION
          value: $(params.model_pull_location)
        - name: FILE_NAME
          value: $(params.file_name)
        - name: BUCKET_NAME
          value: $(params.bucket_name)
        - name: S3_ENDPOINT
          value: $(params.endpoint_url)
        # - name: ACCESS_KEY
        #   value: $(params.aws_access_key_id)
        # - name: SECRET_KEY
        #   value: $(params.aws_secret_access_key)
        - name: ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: s3-credentials
              key: S3_ACCESS_KEY_ID
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: s3-credentials
              key: S3_SECRET_ACCESS_KEY
      image: 'quay.io/rh_ee_akugel/datacard-python:1.1'
      name: get-data-s3
      script: |
        #!/usr/bin/env python3

        import boto3
        import os
        import json

        # from dotenv import load_dotenv

        # load_dotenv()

        def update_model_card(data_card: dict):

            bucket_name = os.environ.get("BUCKET_NAME")
            endpoint_url=os.environ.get("S3_ENDPOINT")
            aws_access_key_id = os.environ.get("ACCESS_KEY")
            aws_secret_access_key = os.environ.get("SECRET_KEY")
            object_key = os.environ.get("FILE_NAME")

            s3_client = boto3.client(
                service_name="s3",
                aws_access_key_id=aws_access_key_id,
                aws_secret_access_key=aws_secret_access_key,
                endpoint_url=endpoint_url,
            )

            response = s3_client.put_object(
                Bucket=bucket_name,
                Key=object_key,
                Body=json.dumps(data_card, indent=2)
            )
            print(response)

        def main():
            print(os.getcwd())
            model_card = json.loads(os.environ.get("MODEL_CARD"))
            model_location = os.environ.get("MODEL_PULL_LOCATION")

            model_card["model_pull_location"] = model_location
            print(json.dumps(model_card, indent=2))
            update_model_card(model_card)

        if __name__ == "__main__":
            main()
