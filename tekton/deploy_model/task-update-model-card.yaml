apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: update-model-card-with-inference-info
spec:
  params:
    - name: inference_route
      type: string
    - name: manifests_dir
      type: string
    - name: model_card_name
      type: string
  steps:
    - computeResources: {}
      env:
        - name: INFERENCE_ROUTE
          value: $(params.inference_route)
        - name: MANIFESTS_DIR
          value: $(params.manifests_dir)
        - name: MODEL_CARD_NAME
          value: $(params.model_card_name)
        - name: ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: s3-credentials
              key: S3_ACCESS_KEY_ID
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: s3-credentials
              key: S3_SECRET_ACCESS_KEY
      image: 'quay.io/rh_ee_akugel/python-tasks:0.0.2'
      name: echo
      script: |
        #!/usr/bin/env python3

        import boto3
        import os
        import json

        def initialize_s3_client() -> boto3.client:
            endpoint_url="https://minio-api-minio.apps.cluster-4ghn9.4ghn9.sandbox2431.opentlc.com"
            aws_access_key_id = os.environ.get("ACCESS_KEY")
            aws_secret_access_key = os.environ.get("SECRET_KEY")
            
            s3_client = boto3.client(
            service_name="s3",
            aws_access_key_id=aws_access_key_id,
            aws_secret_access_key=aws_secret_access_key,
            endpoint_url=endpoint_url,
            )
            return s3_client

        def get_object(key: str, bucket: str, s3_client: boto3.client) -> dict:
            response = s3_client.get_object(Bucket=bucket, Key=key)
            content = response['Body'].read().decode('utf-8')
            return json.loads(content)

        def push_object(key: str, bucket: str, object: dict, s3_client: boto3.client):
            response = s3_client.put_object(
                Bucket=bucket,
                Key=key,
                Body=json.dumps(object, indent=2)
            )
            print(response)

        def main():
            #inference_route = os.environ.get("INFERENCE_ROUTE")
            s3_client = initialize_s3_client()
            #data_card = get_object(os.environ.get("DATA_CARD"), "data-cards", s3_client)
            model_card = get_object(os.environ.get("MODEL_CARD_NAME"), "model-cards", s3_client)
            print(json.dumps(model_card, indent=2)+ "\n\n\n")
            model_card["deployed_locations"][-1]["inference_service"] = os.environ.get("INFERENCE_ROUTE")
            model_card["deployed_locations"][-1]["git_repo"] =  os.environ.get("GIT_URL") + os.environ.get("MANIFESTS_DIR")

            print(json.dumps(model_card, indent=2))

            push_object(key=os.environ.get("MODEL_CARD_NAME"), bucket="model_cards", object=model_card, s3_client=s3_client)


        if __name__ == "__main__":
            main()
